package com.stefvisser.springyield.models;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor

public class User implements UserDetails {

    public User(String firstName, String lastName, String password, String email, int bsnNumber, String phoneNumber, UserRole role, List<Account> accounts) {
        // userId is automatically generated by the database
        this.firstName = firstName;
        this.lastName = lastName;
        this.password = password;
        this.email = email;
        this.bsnNumber = bsnNumber;
        this.phoneNumber = phoneNumber;
        this.role = role;
        this.accounts = accounts;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    private String firstName, lastName;
    /// Salt is automatically added to the password using BCryptPasswordEncoder, so no 'salt' field is needed
    @JsonIgnore
    private String password;

    @Column(unique = true)
    @Email
    private String email;

    private int bsnNumber;
    private String phoneNumber;

    @Enumerated(EnumType.STRING)
    private UserRole role;

    @JsonManagedReference
    @OneToMany(mappedBy = "user", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, orphanRemoval = false)
    private List<Account> accounts = new ArrayList<>();

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of();
    }

    @Override
    public String getUsername() {
        return email;
    }

    public boolean hasAccount(String iban) {
        String normalizedIban = iban.toLowerCase().replace(" ", "");
        if (accounts == null || accounts.isEmpty()) {
            return false;
        }
        // Normalize the IBAN by removing spaces and converting to lowercase for comparison
        if (normalizedIban.isEmpty()) {
            return false;
        }

        return accounts.stream()
                .anyMatch(account -> account
                        .getIban()
                        .toLowerCase()
                        .replace(" ", "")
                        .equalsIgnoreCase(normalizedIban));
    }

    public boolean isEmployee() {
        return role == UserRole.ADMIN || role == UserRole.EMPLOYEE;
    }
    public boolean isApproved() {
        return role == UserRole.APPROVED || role == UserRole.UNAPPROVED;
    }

}

